{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "1f97d1c5-12dc-4b8f-95ae-829340b6e443",
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\n\n\nimport time\nimport random\n\ndef generate_data(size):\n    return [random.randint(1, 1000) for _ in range(size)]\n\n#Example\n\nprint(generate_data(100))\n\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ntest_list = [64, 34, 25, 12, 22, 11, 90]\n\nprint(\"Original:\", test_list)\nprint(\"sorted:\", bubble_sort(test_list.copy()))\n\n\n\ndef merge_sort(tab):\n    if len(tab) > 1 :\n        mid = len(tab) // 2\n        left = tab[:mid]\n        right = tab[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i=j=k=0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                tab[k] = left[i]\n                i+=1\n            else:\n                tab[k] = right[j]\n                j+=1\n            k+=1\n\n        while i < len(left):\n            tab[k] = left[i]\n            i+=1\n            k+=1\n\n        while j < len(right):\n            tab[k] = right[j]\n            j+=1\n            k+=1\n    return tab\n\ntest_list = [65, 34, 77, 12, 89, 90, 100]\n\nprint(\"Original:\", test_list)\nprint(\"Sorted:\", merge_sort(test_list.copy()))\n\n\ndef quick_sort(tab):\n    if len(tab) <= 1:\n        return tab\n    else:\n        pivot = tab[len(tab) // 2]\n        left = [ x for x in tab if x < pivot]\n        middle = [ x for x in tab if x == pivot]\n        right = [ x for x in tab if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n\ntest_list = [43, 1, 23, 3, 11, 23, 45, 55, 80, 100]\n\nprint(\"Original:\", test_list)\nprint(\"Sorted:\", quick_sort(test_list.copy()))\n\n\ndef measure_time(sort_func, data):\n    start = time.time()\n    sort_func(data.copy())\n    end = time.time()\n    return end - start\n\n#Examples\nsizes = [100, 1000, 5000]\nresults = {}\n\nfor size in sizes:\n    data = generate_data(size)\n    results[size] = {\n    \"Bubble Sort\" : measure_time(bubble_sort, data),\n    \"Merge Sort\" : measure_time(merge_sort, data),\n    \"Quick Sort\" : measure_time(quick_sort, data),\n    }\n\nprint(results)\n\n\n\n\n\n\n\n\n\n\n\n\n\nsizes = list(results.keys())\nbubble_times = [results[size][\"Bubble Sort\"] for size in sizes]\nmerge_times = [results[size][\"Merge Sort\"] for size in sizes]\nquick_times = [results[size][\"Quick Sort\"] for size in sizes]\n\nplt.plot(sizes, bubble_times, label = \"Bubble Sort\")\nplt.plot(sizes, merge_times, label = \"Merge Sort\")\nplt.plot(sizes, quick_times, label = \"Quick Sort\")\n\nplt.xlabel(\"Input Size\")\nplt.ylabel(\"Time (seconds)\")\n\nplt.title(\"Sorting Algorithm Runtime Comparison\")\nplt.legend()\nplt.savefig(\"results/runtime_comparison.png\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "[937, 92, 441, 571, 587, 468, 154, 278, 154, 706, 25, 135, 127, 443, 767, 59, 61, 911, 572, 388, 309, 131, 346, 694, 177, 700, 876, 561, 732, 852, 361, 28, 163, 48, 195, 481, 372, 596, 796, 645, 368, 719, 183, 780, 858, 890, 256, 461, 326, 838, 774, 23, 472, 914, 152, 879, 816, 816, 463, 382, 510, 273, 977, 398, 361, 271, 95, 180, 518, 771, 457, 544, 531, 535, 596, 858, 673, 828, 998, 851, 37, 375, 420, 956, 742, 278, 372, 4, 108, 17, 345, 248, 120, 988, 672, 336, 631, 566, 256, 760]\nOriginal: [64, 34, 25, 12, 22, 11, 90]\nsorted: [11, 12, 22, 25, 34, 64, 90]\nOriginal: [65, 34, 77, 12, 89, 90, 100]\nSorted: [12, 34, 65, 77, 89, 90, 100]\nOriginal: [43, 1, 23, 3, 11, 23, 45, 55, 80, 100]\nSorted: [1, 3, 11, 23, 23, 43, 45, 55, 80, 100]\n{100: {'Bubble Sort': 0.0010001659393310547, 'Merge Sort': 0.0009999275207519531, 'Quick Sort': 0.0}, 1000: {'Bubble Sort': 0.11399984359741211, 'Merge Sort': 0.003999948501586914, 'Quick Sort': 0.002000093460083008}, 5000: {'Bubble Sort': 3.4609999656677246, 'Merge Sort': 0.03099966049194336, 'Quick Sort': 0.01100015640258789}}\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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"
          },
          "metadata": {}
        },
        {
          "ename": "<class 'FileNotFoundError'>",
          "evalue": "[Errno 44] No such file or directory: 'results/runtime_comparison.png'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[3], line 129\u001b[0m\n\u001b[1;32m    127\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSorting Algorithm Runtime Comparison\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    128\u001b[0m plt\u001b[38;5;241m.\u001b[39mlegend()\n\u001b[0;32m--> 129\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msavefig\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mresults/runtime_comparison.png\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/matplotlib/pyplot.py:1134\u001b[0m, in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1131\u001b[0m fig \u001b[38;5;241m=\u001b[39m gcf()\n\u001b[1;32m   1132\u001b[0m \u001b[38;5;66;03m# savefig default implementation has no return, so mypy is unhappy\u001b[39;00m\n\u001b[1;32m   1133\u001b[0m \u001b[38;5;66;03m# presumably this is here because subclasses can return?\u001b[39;00m\n\u001b[0;32m-> 1134\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[43mfig\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msavefig\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# type: ignore[func-returns-value]\u001b[39;00m\n\u001b[1;32m   1135\u001b[0m fig\u001b[38;5;241m.\u001b[39mcanvas\u001b[38;5;241m.\u001b[39mdraw_idle()  \u001b[38;5;66;03m# Need this if 'transparent=True', to reset colors.\u001b[39;00m\n\u001b[1;32m   1136\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m res\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/matplotlib/figure.py:3390\u001b[0m, in \u001b[0;36mFigure.savefig\u001b[0;34m(self, fname, transparent, **kwargs)\u001b[0m\n\u001b[1;32m   3388\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m ax \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes:\n\u001b[1;32m   3389\u001b[0m         _recursively_make_axes_transparent(stack, ax)\n\u001b[0;32m-> 3390\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcanvas\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprint_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/matplotlib/backend_bases.py:2193\u001b[0m, in \u001b[0;36mFigureCanvasBase.print_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2189\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   2190\u001b[0m     \u001b[38;5;66;03m# _get_renderer may change the figure dpi (as vector formats\u001b[39;00m\n\u001b[1;32m   2191\u001b[0m     \u001b[38;5;66;03m# force the figure dpi to 72), so we need to set it again here.\u001b[39;00m\n\u001b[1;32m   2192\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m cbook\u001b[38;5;241m.\u001b[39m_setattr_cm(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfigure, dpi\u001b[38;5;241m=\u001b[39mdpi):\n\u001b[0;32m-> 2193\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[43mprint_method\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2194\u001b[0m \u001b[43m            \u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2195\u001b[0m \u001b[43m            \u001b[49m\u001b[43mfacecolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfacecolor\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2196\u001b[0m \u001b[43m            \u001b[49m\u001b[43medgecolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43medgecolor\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2197\u001b[0m \u001b[43m            \u001b[49m\u001b[43morientation\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morientation\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2198\u001b[0m \u001b[43m            \u001b[49m\u001b[43mbbox_inches_restore\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m_bbox_inches_restore\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2199\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2200\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m   2201\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m bbox_inches \u001b[38;5;129;01mand\u001b[39;00m restore_bbox:\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/matplotlib/backend_bases.py:2043\u001b[0m, in \u001b[0;36mFigureCanvasBase._switch_canvas_and_return_print_method.<locals>.<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   2039\u001b[0m     optional_kws \u001b[38;5;241m=\u001b[39m {  \u001b[38;5;66;03m# Passed by print_figure for other renderers.\u001b[39;00m\n\u001b[1;32m   2040\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdpi\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfacecolor\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124medgecolor\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124morientation\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   2041\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbbox_inches_restore\u001b[39m\u001b[38;5;124m\"\u001b[39m}\n\u001b[1;32m   2042\u001b[0m     skip \u001b[38;5;241m=\u001b[39m optional_kws \u001b[38;5;241m-\u001b[39m {\u001b[38;5;241m*\u001b[39minspect\u001b[38;5;241m.\u001b[39msignature(meth)\u001b[38;5;241m.\u001b[39mparameters}\n\u001b[0;32m-> 2043\u001b[0m     print_method \u001b[38;5;241m=\u001b[39m functools\u001b[38;5;241m.\u001b[39mwraps(meth)(\u001b[38;5;28;01mlambda\u001b[39;00m \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs: \u001b[43mmeth\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2044\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m{\u001b[49m\u001b[43mk\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mk\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mitems\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mk\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mskip\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m   2045\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:  \u001b[38;5;66;03m# Let third-parties do as they see fit.\u001b[39;00m\n\u001b[1;32m   2046\u001b[0m     print_method \u001b[38;5;241m=\u001b[39m meth\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/matplotlib/backends/backend_agg.py:497\u001b[0m, in \u001b[0;36mFigureCanvasAgg.print_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs)\u001b[0m\n\u001b[1;32m    450\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mprint_png\u001b[39m(\u001b[38;5;28mself\u001b[39m, filename_or_obj, \u001b[38;5;241m*\u001b[39m, metadata\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, pil_kwargs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    451\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    452\u001b[0m \u001b[38;5;124;03m    Write the figure to a PNG file.\u001b[39;00m\n\u001b[1;32m    453\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[38;5;124;03m        *metadata*, including the default 'Software' key.\u001b[39;00m\n\u001b[1;32m    496\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 497\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_print_pil\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mpng\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpil_kwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetadata\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/matplotlib/backends/backend_agg.py:446\u001b[0m, in \u001b[0;36mFigureCanvasAgg._print_pil\u001b[0;34m(self, filename_or_obj, fmt, pil_kwargs, metadata)\u001b[0m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    442\u001b[0m \u001b[38;5;124;03mDraw the canvas, then save it using `.image.imsave` (to which\u001b[39;00m\n\u001b[1;32m    443\u001b[0m \u001b[38;5;124;03m*pil_kwargs* and *metadata* are forwarded).\u001b[39;00m\n\u001b[1;32m    444\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    445\u001b[0m FigureCanvasAgg\u001b[38;5;241m.\u001b[39mdraw(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 446\u001b[0m \u001b[43mmpl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimsave\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    447\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbuffer_rgba\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfmt\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43morigin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mupper\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    448\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdpi\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfigure\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdpi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetadata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmetadata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpil_kwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpil_kwargs\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/matplotlib/image.py:1656\u001b[0m, in \u001b[0;36mimsave\u001b[0;34m(fname, arr, vmin, vmax, cmap, format, origin, dpi, metadata, pil_kwargs)\u001b[0m\n\u001b[1;32m   1654\u001b[0m pil_kwargs\u001b[38;5;241m.\u001b[39msetdefault(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mformat\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mformat\u001b[39m)\n\u001b[1;32m   1655\u001b[0m pil_kwargs\u001b[38;5;241m.\u001b[39msetdefault(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdpi\u001b[39m\u001b[38;5;124m\"\u001b[39m, (dpi, dpi))\n\u001b[0;32m-> 1656\u001b[0m \u001b[43mimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mpil_kwargs\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/PIL/Image.py:2436\u001b[0m, in \u001b[0;36mImage.save\u001b[0;34m(self, fp, format, **params)\u001b[0m\n\u001b[1;32m   2434\u001b[0m         fp \u001b[38;5;241m=\u001b[39m builtins\u001b[38;5;241m.\u001b[39mopen(filename, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mr+b\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   2435\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 2436\u001b[0m         fp \u001b[38;5;241m=\u001b[39m \u001b[43mbuiltins\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mw+b\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2438\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   2439\u001b[0m     save_handler(\u001b[38;5;28mself\u001b[39m, fp, filename)\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 44] No such file or directory: 'results/runtime_comparison.png'"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 3
    },
    {
      "id": "78b7bfbd-0a8a-4aab-bda9-5fa651a0045b",
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "94ed0532-743c-493b-8138-e7fd97e42fb9",
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}